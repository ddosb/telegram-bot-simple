import os
import logging
from dotenv import load_dotenv
import asyncio
import nest_asyncio
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    JobQueue,
)
from datetime import datetime, timedelta
from collections import Counter

nest_asyncio.apply()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

SERVICE, DATE, TIME = range(3)
SLOT_LIMIT = 2  # –ú–∞–∫—Å–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ–¥–∏–Ω —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏

DB_PATH = "bookings.db"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_name TEXT NOT NULL,
            service TEXT NOT NULL,
            date TEXT NOT NULL,
            time TEXT NOT NULL
        )
    ''')
    
    cursor.execute("PRAGMA table_info(bookings)")
    columns = [col[1] for col in cursor.fetchall()]
    if "time" not in columns:
        logger.info("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É time –≤ —Ç–∞–±–ª–∏—Ü—É bookings")
        cursor.execute("ALTER TABLE bookings ADD COLUMN time TEXT NOT NULL DEFAULT '00:00'")
    
    cursor.execute("DROP INDEX IF EXISTS idx_date_time")
    logger.info("–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å idx_date_time —É–¥–∞–ª—ë–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ SLOT_LIMIT")
    
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"], ["–ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏.", reply_markup=reply_markup)
    return ConversationHandler.END

async def record(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.full_name}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {context.user_data.get('state', 'None')}")
    
    context.user_data.clear()
    context.user_data['state'] = SERVICE
    
    services = [
        [InlineKeyboardButton("–ú–∞—Å—Å–∞–∂", callback_data="–ú–∞—Å—Å–∞–∂"),
         InlineKeyboardButton("–ú–∞–Ω–∏–∫—é—Ä", callback_data="–ú–∞–Ω–∏–∫—é—Ä"),
         InlineKeyboardButton("–°—Ç—Ä–∏–∂–∫–∞", callback_data="–°—Ç—Ä–∏–∂–∫–∞")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(services)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)
    return SERVICE

async def service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    service = query.data
    
    if service == "back_to_menu":
        return await back_to_menu(update, context)
    
    context.user_data["service"] = service
    context.user_data['state'] = DATE
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {service} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.full_name}")
    
    dates = []
    for i in range(7):
        date = datetime.now() + timedelta(days=i)
        date_str = date.strftime("%d.%m")
        dates.append(InlineKeyboardButton(date_str, callback_data=date_str))
    keyboard = [dates, [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_services")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {service}\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=reply_markup)
    return DATE

async def date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    date = query.data
    
    if date == "back_to_services":
        return await back_to_services(update, context)
    
    context.user_data["date"] = date
    context.user_data['state'] = TIME
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date}")
    
    all_times = ["10:00", "12:00", "14:00", "16:00"]
    
    try:
        times = [InlineKeyboardButton(time, callback_data=time) for time in all_times]
        keyboard = [[*times], [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_date")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {context.user_data['service']}\n–î–∞—Ç–∞: {date}\n–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ—Ç–æ–≤: {type(e).__name__}: {str(e)}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
        return ConversationHandler.END
    
    return TIME

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.data["chat_id"]
    admin_id = job.data["admin_id"]
    service = job.data["service"]
    date = job.data["date"]
    time = job.data["time"]
    await context.bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ —É –≤–∞—Å {service} –Ω–∞ {date} –≤ {time}!")
    await context.bot.send_message(admin_id, f"–ö–ª–∏–µ–Ω—Ç –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ {service} –Ω–∞ {date} –≤ {time} –∑–∞–≤—Ç—Ä–∞.")

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    time = query.data
    
    if time == "back_to_date":
        return await back_to_date(update, context)
    
    service = context.user_data["service"]
    date = context.user_data["date"]
    user = update.effective_user
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏: {service} –Ω–∞ {date} –≤ {time} –¥–ª—è {user.full_name}")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM bookings WHERE date = ? AND time = ?", (date, time))
    current_bookings = cursor.fetchone()[0]
    logger.info(f"–¢–µ–∫—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ {date} {time}: {current_bookings}")
    
    if current_bookings >= SLOT_LIMIT:
        logger.info(f"–°–ª–æ—Ç {date} {time} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ ({SLOT_LIMIT})")
        await query.edit_message_text(
            f"–°–ª–æ—Ç {time} –Ω–∞ {date} –∑–∞–Ω—è—Ç (–ª–∏–º–∏—Ç {SLOT_LIMIT} –∑–∞–ø–∏—Å–∏). –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
        )
        conn.close()
        return await date(update, context)
    
    try:
        logger.info(f"–í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏: {user.full_name}, {service}, {date}, {time}")
        cursor.execute(
            "INSERT INTO bookings (user_name, service, date, time) VALUES (?, ?, ?, ?)",
            (user.full_name, service, date, time)
        )
        conn.commit()
        logger.info("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É")
        
        current_year = datetime.now().year
        date_time_str = f"{date}.{current_year} {time}"
        date_obj = datetime.strptime(date_time_str, "%d.%m.%Y %H:%M")
        reminder_time = datetime.now().replace(hour=9, minute=0, second=0, microsecond=0)
        
        days_until = (date_obj.date() - reminder_time.date()).days
        if days_until > 0:
            reminder_time += timedelta(days=days_until - 1)
            context.job_queue.run_once(
                send_reminder,
                when=reminder_time,
                data={"chat_id": user.id, "admin_id": ADMIN_ID, "service": service, "date": date, "time": time}
            )
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {reminder_time}")
        
        keyboard = [
            [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞", callback_data="restart")],
            [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\nüóì –£—Å–ª—É–≥–∞: {service}\nüìÖ –î–∞—Ç–∞: {date}\n‚è∞ –í—Ä–µ–º—è: {time}",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {type(e).__name__}: {str(e)}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        conn.close()
    
    return ConversationHandler.END

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.full_name} –Ω–∞–∂–∞–ª '–û–ø–ª–∞—Ç–∏—Ç—å'")
    
    fake_order_id = f"{query.from_user.id}{int(datetime.now().timestamp())}"
    payment_link = f"https://example.com/pay?order={fake_order_id}"
    
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_link)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞—Ç—ë–∂–Ω—ã–π —à–ª—é–∑...\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}\n"
        f"(–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
        reply_markup=reply_markup
    )

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"–í—ã–∑–≤–∞–Ω restart –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.full_name}")
    context.user_data.clear()
    context.user_data['state'] = SERVICE
    
    services = [
        [InlineKeyboardButton("–ú–∞—Å—Å–∞–∂", callback_data="–ú–∞—Å—Å–∞–∂"),
         InlineKeyboardButton("–ú–∞–Ω–∏–∫—é—Ä", callback_data="–ú–∞–Ω–∏–∫—é—Ä"),
         InlineKeyboardButton("–°—Ç—Ä–∏–∂–∫–∞", callback_data="–°—Ç—Ä–∏–∂–∫–∞")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(services)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)
    return SERVICE

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.full_name} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    context.user_data.clear()
    keyboard = [["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"], ["–ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await query.edit_message_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=reply_markup)
    return ConversationHandler.END

async def back_to_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.full_name} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥")
    context.user_data.pop('date', None)
    context.user_data['state'] = SERVICE
    
    services = [
        [InlineKeyboardButton("–ú–∞—Å—Å–∞–∂", callback_data="–ú–∞—Å—Å–∞–∂"),
         InlineKeyboardButton("–ú–∞–Ω–∏–∫—é—Ä", callback_data="–ú–∞–Ω–∏–∫—é—Ä"),
         InlineKeyboardButton("–°—Ç—Ä–∏–∂–∫–∞", callback_data="–°—Ç—Ä–∏–∂–∫–∞")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(services)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)
    return SERVICE

async def back_to_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    service = context.user_data["service"]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.full_name} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã")
    context.user_data['state'] = DATE
    
    dates = []
    for i in range(7):
        date = datetime.now() + timedelta(days=i)
        date_str = date.strftime("%d.%m")
        dates.append(InlineKeyboardButton(date_str, callback_data=date_str))
    keyboard = [dates, [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_services")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {service}\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=reply_markup)
    return DATE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.message.from_user.full_name}")
    context.user_data.clear()
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await send_stats(update.message, context)

async def send_stats(message_or_query, context):
    logger.info("–ù–∞—á–∞–ª–æ –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        logger.info("–ó–∞–ø—Ä–æ—Å –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π")
        cursor.execute("SELECT COUNT(*) FROM bookings")
        total = cursor.fetchone()[0]
        
        logger.info("–ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–µ–π –ø–æ —É—Å–ª—É–≥–∞–º")
        cursor.execute("SELECT service, COUNT(*) FROM bookings GROUP BY service")
        service_counts = cursor.fetchall()
        service_stats = "\n".join([f"{service}: {count}" for service, count in service_counts]) if service_counts else "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
        
        logger.info("–ó–∞–ø—Ä–æ—Å —Å–∞–º–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –¥–Ω—è")
        cursor.execute("SELECT date, COUNT(*) as cnt FROM bookings GROUP BY date ORDER BY cnt DESC LIMIT 1")
        popular_day = cursor.fetchone()
        popular_day_str = f"{popular_day[0]} ({popular_day[1]} –∑–∞–ø–∏—Å–µ–π)" if popular_day else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        conn.close()
        
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}\n"
            f"–ü–æ —É—Å–ª—É–≥–∞–º:\n{service_stats}\n"
            f"–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –¥–µ–Ω—å: {popular_day_str}"
        )
        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")
        await message_or_query.edit_message_text(stats_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {type(e).__name__}: {str(e)}")
        await message_or_query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- –ó–∞–ø–∏—Å–∞—Ç—å—Å—è: –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n"
        "- –ü–æ–º–æ—â—å: —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "- /admin: –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"
    )

async def view_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT id, service, date, time FROM bookings WHERE user_name = ?", (user.full_name,))
        user_bookings = cursor.fetchall()
        conn.close()
        
        if not user_bookings:
            await update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –í–∞—à–µ –∏–º—è: {user.full_name}")
            return
        
        keyboard = []
        for booking in user_bookings:
            booking_id, service, date, time = booking
            callback_data = f"cancel_{booking_id}"
            keyboard.append([
                InlineKeyboardButton(f"{service} –Ω–∞ {date} –≤ {time}", callback_data="noop"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=callback_data)
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø–∏—Å–µ–π: {type(e).__name__}: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π.")

async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    booking_id = int(query.data.split("_")[1])
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM bookings WHERE id = ?", (booking_id,))
        conn.commit()
        conn.close()
        
        await query.edit_message_text("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {type(e).__name__}: {str(e)}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏.")

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ—Ç–∫—Ä—ã–ª –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="admin_view")],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

async def view_all_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if user_id != ADMIN_ID:
        await query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT id, user_name, service, date, time FROM bookings")
        all_bookings = cursor.fetchall()
        conn.close()
        
        if not all_bookings:
            await query.edit_message_text("–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
            return
        
        keyboard = []
        for booking in all_bookings:
            booking_id, user_name, service, date, time = booking
            callback_data = f"admin_delete_{booking_id}"
            keyboard.append([
                InlineKeyboardButton(f"{user_name}: {service} –Ω–∞ {date} –≤ {time}", callback_data="noop"),
                InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=callback_data)
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—Å–µ –∑–∞–ø–∏—Å–∏:", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: {type(e).__name__}: {str(e)}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π.")

async def delete_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if user_id != ADMIN_ID:
        await query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    booking_id = int(query.data.split("_")[2])
    logger.info(f"–ê–¥–º–∏–Ω {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {booking_id}")
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT user_name, service, date, time FROM bookings WHERE id = ?", (booking_id,))
        booking = cursor.fetchone()
        
        if not booking:
            await query.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            conn.close()
            return
        
        user_name, service, date, time = booking
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏: {user_name}, {service}, {date}, {time}")
        
        cursor.execute("DELETE FROM bookings WHERE id = ?", (booking_id,))
        conn.commit()
        conn.close()
        
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞: {user_name} - {service} –Ω–∞ {date} –≤ {time}",
            reply_markup=reply_markup
        )
        logger.info(f"–ê–¥–º–∏–Ω {user_id} —É–¥–∞–ª–∏–ª –∑–∞–ø–∏—Å—å {booking_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {type(e).__name__}: {str(e)}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")

async def back_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if user_id != ADMIN_ID:
        await query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    logger.info(f"–ê–¥–º–∏–Ω {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="admin_view")],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if user_id != ADMIN_ID:
        await query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    logger.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    await send_stats(query, context)

def main():
    init_db()
    
    application = Application.builder().token(TOKEN).job_queue(JobQueue()).build()
    application.job_queue.start()
    
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r"^(–ó–∞–ø–∏—Å–∞—Ç—å—Å—è)$"), record),
            CallbackQueryHandler(restart, pattern="^restart$")
        ],
        states={
            SERVICE: [CallbackQueryHandler(service)],
            DATE: [CallbackQueryHandler(date)],
            TIME: [CallbackQueryHandler(get_time)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"),
            CallbackQueryHandler(back_to_services, pattern="^back_to_services$"),
            CallbackQueryHandler(back_to_date, pattern="^back_to_date$"),
        ],
        allow_reentry=True
    )
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(MessageHandler(filters.Regex(r"^(–ü–æ–º–æ—â—å)$"), help_command))
    application.add_handler(MessageHandler(filters.Regex(r"^(–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏)$"), view_bookings))
    application.add_handler(CallbackQueryHandler(pay, pattern="^pay$"))
    application.add_handler(CallbackQueryHandler(cancel_booking, pattern="^cancel_"))
    application.add_handler(CallbackQueryHandler(view_all_bookings, pattern="^admin_view$"))
    application.add_handler(CallbackQueryHandler(delete_booking, pattern="^admin_delete_"))
    application.add_handler(CallbackQueryHandler(admin_stats, pattern="^admin_stats$"))
    application.add_handler(CallbackQueryHandler(back_to_admin, pattern="^back_to_admin$"))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
