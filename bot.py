import os
import logging
from dotenv import load_dotenv
import asyncio
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    JobQueue,
)
import gspread_asyncio
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta

nest_asyncio.apply()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
GOOGLE_SHEETS_CREDENTIALS = os.getenv("GOOGLE_SHEETS_CREDENTIALS")

SERVICE, DATE = range(2)

def get_gspread_client():
    credentials_dict = eval(GOOGLE_SHEETS_CREDENTIALS)
    credentials = ServiceAccountCredentials.from_json_keyfile_dict(
        credentials_dict,
        scopes=['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    )
    return gspread_asyncio.AsyncioGspreadClientManager(lambda: credentials)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏"], ["–ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏.", reply_markup=reply_markup)
    return ConversationHandler.END

async def record(update: Update, context: ContextTypes.DEFAULT_TYPE):
    services = [
        InlineKeyboardButton("–ú–∞—Å—Å–∞–∂", callback_data="–ú–∞—Å—Å–∞–∂"),
        InlineKeyboardButton("–ú–∞–Ω–∏–∫—é—Ä", callback_data="–ú–∞–Ω–∏–∫—é—Ä"),
        InlineKeyboardButton("–°—Ç—Ä–∏–∂–∫–∞", callback_data="–°—Ç—Ä–∏–∂–∫–∞"),
    ]
    reply_markup = InlineKeyboardMarkup([services])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)
    return SERVICE

async def service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    service = query.data
    context.user_data["service"] = service
    
    dates = []
    for i in range(7):
        date = datetime.now() + timedelta(days=i)
        date_str = date.strftime("%d.%m")
        dates.append(InlineKeyboardButton(date_str, callback_data=date_str))
    reply_markup = InlineKeyboardMarkup([dates])
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {service}\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=reply_markup)
    return DATE

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.data["chat_id"]
    admin_id = job.data["admin_id"]
    service = job.data["service"]
    date = job.data["date"]
    await context.bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ —É –≤–∞—Å {service} –Ω–∞ {date}!")
    await context.bot.send_message(admin_id, f"–ö–ª–∏–µ–Ω—Ç –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ {service} –∑–∞–≤—Ç—Ä–∞ –≤ {date}.")

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    date = query.data
    service = context.user_data["service"]
    user = update.effective_user
    
    try:
        client = get_gspread_client()
        agc = await client.authorize()
        sheet = await agc.open_by_key("1tDnIzjnvKRyE31fMxL3qJuWG4T8tTf3MnU-38URY1_4")
        worksheet = await sheet.get_worksheet(0)
        await worksheet.append_row([user.full_name, service, date])
        
        current_year = datetime.now().year
        date_obj = datetime.strptime(f"{date}.{current_year}", "%d.%m.%Y")
        reminder_time = datetime.now().replace(hour=9, minute=0, second=0, microsecond=0)
        
        days_until = (date_obj.date() - reminder_time.date()).days
        if days_until > 0:
            reminder_time += timedelta(days=days_until - 1)
            context.job_queue.run_once(
                send_reminder,
                when=reminder_time,
                data={"chat_id": user.id, "admin_id": ADMIN_ID, "service": service, "date": date}
            )
        
        keyboard = [[InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞", callback_data="restart")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\nüóì –£—Å–ª—É–≥–∞: {service}\nüìÖ –î–∞—Ç–∞: {date}",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {type(e).__name__}: {str(e)}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.")
    return ConversationHandler.END

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    services = [
        InlineKeyboardButton("–ú–∞—Å—Å–∞–∂", callback_data="–ú–∞—Å—Å–∞–∂"),
        InlineKeyboardButton("–ú–∞–Ω–∏–∫—é—Ä", callback_data="–ú–∞–Ω–∏–∫—é—Ä"),
        InlineKeyboardButton("–°—Ç—Ä–∏–∂–∫–∞", callback_data="–°—Ç—Ä–∏–∂–∫–∞"),
    ]
    reply_markup = InlineKeyboardMarkup([services])
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)
    return SERVICE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    try:
        client = get_gspread_client()
        agc = await client.authorize()
        sheet = await agc.open_by_key("1tDnIzjnvKRyE31fMxL3qJuWG4T8tTf3MnU-38URY1_4")
        worksheet = await sheet.get_worksheet(0)
        records = await worksheet.get_all_values()
        total = len(records) - 1
        await update.message.reply_text(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /stats: {type(e).__name__}: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π.")

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- –ó–∞–ø–∏—Å–∞—Ç—å—Å—è: –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∏ –¥–∞—Ç—É\n"
        "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏: —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π\n"
        "- –ü–æ–º–æ—â—å: —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏"
async def view_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    try:
        client = get_gspread_client()
        agc = await client.authorize()
        sheet = await agc.open_by_key("1tDnIzjnvKRyE31fMxL3qJuWG4T8tTf3MnU-38URY1_4")
        worksheet = await sheet.get_worksheet(0)
        records = await worksheet.get_all_values()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_bookings = [row for row in records[1:] if row[0] == user.full_name]
        if not user_bookings:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return
        
        response = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n"
        for booking in user_bookings:
            response += f"- {booking[1]} –Ω–∞ {booking[2]}\n"
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø–∏—Å–µ–π: {type(e).__name__}: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π.")

def main():
    application = Application.builder().token(TOKEN).job_queue(JobQueue()).build()
    application.job_queue.start()
    
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^(–ó–∞–ø–∏—Å–∞—Ç—å—Å—è)$"), record)],
        states={
            SERVICE: [CallbackQueryHandler(service)],
            DATE: [CallbackQueryHandler(get_date)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CallbackQueryHandler(restart, pattern="^restart$"))
    application.add_handler(MessageHandler(filters.Regex("^(–ü–æ–º–æ—â—å)$"), help_command))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ü–æ–º–æ—â—å"
    application.add_handler(MessageHandler(filters.Regex("^(–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏)$"), view_bookings))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏")
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
