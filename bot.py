import os
import logging
from dotenv import load_dotenv
import asyncio
import nest_asyncio
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    JobQueue,
)
from datetime import datetime, timedelta

nest_asyncio.apply()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

SERVICE, DATE, TIME = range(3)

DB_PATH = "bookings.db"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_name TEXT NOT NULL,
            service TEXT NOT NULL,
            date TEXT NOT NULL,
            time TEXT NOT NULL
        )
    ''')
    
    cursor.execute("PRAGMA table_info(bookings)")
    columns = [col[1] for col in cursor.fetchall()]
    if "time" not in columns:
        logger.info("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É time –≤ —Ç–∞–±–ª–∏—Ü—É bookings")
        cursor.execute("ALTER TABLE bookings ADD COLUMN time TEXT NOT NULL DEFAULT '00:00'")
    
    try:
        cursor.execute("CREATE UNIQUE INDEX IF NOT EXISTS idx_date_time ON bookings (date, time)")
        logger.info("–°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ date –∏ time")
    except sqlite3.OperationalError as e:
        logger.warning(f"–ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {str(e)}")
    
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏"], ["–ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏.", reply_markup=reply_markup)
    return ConversationHandler.END

async def record(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è record –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.full_name}")
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    services = [
        InlineKeyboardButton("–ú–∞—Å—Å–∞–∂", callback_data="–ú–∞—Å—Å–∞–∂"),
        InlineKeyboardButton("–ú–∞–Ω–∏–∫—é—Ä", callback_data="–ú–∞–Ω–∏–∫—é—Ä"),
        InlineKeyboardButton("–°—Ç—Ä–∏–∂–∫–∞", callback_data="–°—Ç—Ä–∏–∂–∫–∞"),
    ]
    reply_markup = InlineKeyboardMarkup([services])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)
    return SERVICE

async def service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    service = query.data
    context.user_data["service"] = service
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {service} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.full_name}")
    
    dates = []
    for i in range(7):
        date = datetime.now() + timedelta(days=i)
        date_str = date.strftime("%d.%m")
        dates.append(InlineKeyboardButton(date_str, callback_data=date_str))
    reply_markup = InlineKeyboardMarkup([dates])
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {service}\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=reply_markup)
    return DATE

async def date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    date = query.data
    context.user_data["date"] = date
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date}")
    
    all_times = ["10:00", "12:00", "14:00", "16:00"]
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT time FROM bookings WHERE date = ?", (date,))
        booked_times = [row[0] for row in cursor.fetchall()]
        conn.close()
        
        available_times = [t for t in all_times if t not in booked_times]
        
        if not available_times:
            await query.edit_message_text(f"–ù–∞ {date} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
            return DATE
        
        times = [InlineKeyboardButton(time, callback_data=time) for time in available_times]
        reply_markup = InlineKeyboardMarkup([times])
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {context.user_data['service']}\n–î–∞—Ç–∞: {date}\n–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ—Ç–æ–≤: {type(e).__name__}: {str(e)}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
        return ConversationHandler.END
    
    return TIME

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.data["chat_id"]
    admin_id = job.data["admin_id"]
    service = job.data["service"]
    date = job.data["date"]
    time = job.data["time"]
    await context.bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ —É –≤–∞—Å {service} –Ω–∞ {date} –≤ {time}!")
    await context.bot.send_message(admin_id, f"–ö–ª–∏–µ–Ω—Ç –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ {service} –Ω–∞ {date} –≤ {time} –∑–∞–≤—Ç—Ä–∞.")

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    time = query.data
    service = context.user_data["service"]
    date = context.user_data["date"]
    user = update.effective_user
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏: {service} –Ω–∞ {date} –≤ {time} –¥–ª—è {user.full_name}")
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO bookings (user_name, service, date, time) VALUES (?, ?, ?, ?)",
            (user.full_name, service, date, time)
        )
        conn.commit()
        conn.close()
        
        current_year = datetime.now().year
        date_time_str = f"{date}.{current_year} {time}"
        date_obj = datetime.strptime(date_time_str, "%d.%m.%Y %H:%M")
        reminder_time = datetime.now().replace(hour=9, minute=0, second=0, microsecond=0)
        
        days_until = (date_obj.date() - reminder_time.date()).days
        if days_until > 0:
            reminder_time += timedelta(days=days_until - 1)
            context.job_queue.run_once(
                send_reminder,
                when=reminder_time,
                data={"chat_id": user.id, "admin_id": ADMIN_ID, "service": service, "date": date, "time": time}
            )
        
        keyboard = [[InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞", callback_data="restart")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\nüóì –£—Å–ª—É–≥–∞: {service}\nüìÖ –î–∞—Ç–∞: {date}\n‚è∞ –í—Ä–µ–º—è: {time}",
            reply_markup=reply_markup
        )
    except sqlite3.IntegrityError:
        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç: {date} {time}")
        await query.edit_message_text(f"–°–ª–æ—Ç {time} –Ω–∞ {date} —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
        return await date(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {type(e).__name__}: {str(e)}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.")
    return ConversationHandler.END

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"–í—ã–∑–≤–∞–Ω restart –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.full_name}")
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    
    # –≠–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤—Ö–æ–¥ –≤ ConversationHandler
    services = [
        InlineKeyboardButton("–ú–∞—Å—Å–∞–∂", callback_data="–ú–∞—Å—Å–∞–∂"),
        InlineKeyboardButton("–ú–∞–Ω–∏–∫—é—Ä", callback_data="–ú–∞–Ω–∏–∫—é—Ä"),
        InlineKeyboardButton("–°—Ç—Ä–∏–∂–∫–∞", callback_data="–°—Ç—Ä–∏–∂–∫–∞"),
    ]
    reply_markup = InlineKeyboardMarkup([services])
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)
    return SERVICE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM bookings")
        total = cursor.fetchone()[0]
        conn.close()
        await update.message.reply_text(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /stats: {type(e).__name__}: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- –ó–∞–ø–∏—Å–∞—Ç—å—Å—è: –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n"
        "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏: —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π\n"
        "- –ü–æ–º–æ—â—å: —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

async def view_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT id, service, date, time FROM bookings WHERE user_name = ?", (user.full_name,))
        user_bookings = cursor.fetchall()
        conn.close()
        
        if not user_bookings:
            await update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –í–∞—à–µ –∏–º—è: {user.full_name}")
            return
        
        keyboard = []
        for booking in user_bookings:
            booking_id, service, date, time = booking
            callback_data = f"cancel_{booking_id}"
            keyboard.append([
                InlineKeyboardButton(f"{service} –Ω–∞ {date} –≤ {time}", callback_data="noop"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=callback_data)
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø–∏—Å–µ–π: {type(e).__name__}: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π.")

async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    booking_id = int(query.data.split("_")[1])
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM bookings WHERE id = ?", (booking_id,))
        conn.commit()
        conn.close()
        
        await query.edit_message_text("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {type(e).__name__}: {str(e)}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏.")

def main():
    init_db()
    
    application = Application.builder().token(TOKEN).job_queue(JobQueue()).build()
    application.job_queue.start()
    
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r"^(–ó–∞–ø–∏—Å–∞—Ç—å—Å—è)$"), record),
            CallbackQueryHandler(restart, pattern="^restart$")  # –î–æ–±–∞–≤–ª—è–µ–º restart –∫–∞–∫ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
        ],
        states={
            SERVICE: [CallbackQueryHandler(service)],
            DATE: [CallbackQueryHandler(date)],
            TIME: [CallbackQueryHandler(get_time)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(MessageHandler(filters.Regex(r"^(–ü–æ–º–æ—â—å)$"), help_command))
    application.add_handler(MessageHandler(filters.Regex(r"^(–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏)$"), view_bookings))
    application.add_handler(CallbackQueryHandler(cancel_booking, pattern="^cancel_"))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
