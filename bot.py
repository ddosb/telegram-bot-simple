import os
import logging
from dotenv import load_dotenv
import asyncio
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
import gspread_asyncio
from oauth2client.service_account import ServiceAccountCredentials

nest_asyncio.apply()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
GOOGLE_SHEETS_CREDENTIALS = os.getenv("GOOGLE_SHEETS_CREDENTIALS")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SERVICE, DATE = range(2)

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Sheets
def get_gspread_client():
    credentials_dict = eval(GOOGLE_SHEETS_CREDENTIALS)
    credentials = ServiceAccountCredentials.from_json_keyfile_dict(
        credentials_dict,
        scopes=['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    )
    return gspread_asyncio.AsyncioGspreadClientManager(lambda: credentials)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏"], ["–ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏.", reply_markup=reply_markup)
    return ConversationHandler.END

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
async def record(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    services = [
        InlineKeyboardButton("–ú–∞—Å—Å–∞–∂", callback_data="–ú–∞—Å—Å–∞–∂"),
        InlineKeyboardButton("–ú–∞–Ω–∏–∫—é—Ä", callback_data="–ú–∞–Ω–∏–∫—é—Ä"),
        InlineKeyboardButton("–°—Ç—Ä–∏–∂–∫–∞", callback_data="–°—Ç—Ä–∏–∂–∫–∞"),
    ]
    reply_markup = InlineKeyboardMarkup([services])  # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)
    return SERVICE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
async def service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    service = query.data  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
    context.user_data["service"] = service
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ (—Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π)
    from datetime import datetime, timedelta
    dates = []
    for i in range(7):
        date = datetime.now() + timedelta(days=i)
        date_str = date.strftime("%d.%m")
        dates.append(InlineKeyboardButton(date_str, callback_data=date_str))
    reply_markup = InlineKeyboardMarkup([dates])  # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {service}\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=reply_markup)
    return DATE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –∑–∞–ø–∏—Å—å
async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    date = query.data  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    service = context.user_data["service"]
    user = update.effective_user
    
    try:
        # –ó–∞–ø–∏—Å—å –≤ Google Sheets
        client = get_gspread_client()
        agc = await client.authorize()
        sheet = await agc.open_by_key("1tDnIzjnvKRyE31fMxL3qJuWG4T8tTf3MnU-38URY1_4")
        worksheet = await sheet.get_worksheet(0)
        await worksheet.append_row([user.full_name, service, date])
        
        # InlineKeyboard –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
        keyboard = [[InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞", callback_data="restart")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\nüóì –£—Å–ª—É–≥–∞: {service}\nüìÖ –î–∞—Ç–∞: {date}",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {type(e).__name__}: {str(e)}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.")
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    try:
        client = get_gspread_client()
        agc = await client.authorize()
        sheet = await agc.open_by_key("1tDnIzjnvKRyE31fMxL3qJuWG4T8tTf3MnU-38URY1_4")
        worksheet = await sheet.get_worksheet(0)
        records = await worksheet.get_all_values()
        total = len(records) - 1
        await update.message.reply_text(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /stats: {type(e).__name__}: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π.")

def main():
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^(–ó–∞–ø–∏—Å–∞—Ç—å—Å—è)$"), record)],
        states={
            SERVICE: [CallbackQueryHandler(service)],
            DATE: [CallbackQueryHandler(get_date)],
        },
        fallbacks=[CommandHandler("cancel", cancel),
                  CallbackQueryHandler(record, pattern="^restart$")],  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    )
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("stats", stats))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
