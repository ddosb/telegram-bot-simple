import logging
import asyncio
import nest_asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
import gspread_asyncio
from oauth2client.service_account import ServiceAccountCredentials
import os
import json

# –§–∏–∫—Å –¥–ª—è event loop
nest_asyncio.apply()

# –¢–æ–∫–µ–Ω –∏ ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SERVICE, DATE = range(2)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def get_gspread_client():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds_json = os.getenv("GOOGLE_SHEETS_CREDENTIALS")
    creds_dict = json.loads(creds_json)
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    return gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏
async def write_booking(user_name, service, date):
    try:
        client = get_gspread_client()
        agc = await client.authorize()
        sheet = await agc.open_by_key("1tDnIzjnvKRyE31fMxL3qJuWG4T8tTf3MnU-38URY1_4")
        worksheet = await sheet.get_worksheet(0)
        await worksheet.append_row([user_name, service, date])
        logger.info(f"–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {user_name}, {service}, {date}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {type(e).__name__}: {str(e)}")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
async def list_bookings(update: Update, context: CallbackContext):
    try:
        client = get_gspread_client()
        agc = await client.authorize()
        sheet = await agc.open_by_key("1tDnIzjnvKRyE31fMxL3qJuWG4T8tTf3MnU-38URY1_4")
        worksheet = await sheet.get_worksheet(0)
        records = await worksheet.get_all_values()
        if len(records) <= 1:
            await update.message.reply_text("–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            response = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:\n"
            for row in records[1:]:
                response += f"–ò–º—è: {row[0]}, –£—Å–ª—É–≥–∞: {row[1]}, –î–∞—Ç–∞: {row[2]}\n"
            await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Google Sheets: {type(e).__name__}: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π.")

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ /stats
async def stats(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    try:
        client = get_gspread_client()
        agc = await client.authorize()
        sheet = await agc.open_by_key("1tDnIzjnvKRyE31fMxL3qJuWG4T8tTf3MnU-38URY1_4")
        worksheet = await sheet.get_worksheet(0)
        records = await worksheet.get_all_values()
        total = len(records) - 1
        await update.message.reply_text(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /stats: {type(e).__name__}: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π.")

# –ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
async def start(update: Update, context: CallbackContext):
    keyboard = [["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏"], ["–ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏.", reply_markup=reply_markup)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
async def book_start(update: Update, context: CallbackContext):
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞—Å—Å–∞–∂):", reply_markup=ReplyKeyboardRemove())
    return SERVICE

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
async def get_service(update: Update, context: CallbackContext):
    context.user_data["service"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.04):")
    return DATE

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –∑–∞–ø–∏—Å—å
async def get_date(update: Update, context: CallbackContext):
    user = update.message.from_user
    service = context.user_data["service"]
    date = update.message.text
    await write_booking(user.full_name, service, date)
    keyboard = [["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏"], ["–ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\nüóì –£—Å–ª—É–≥–∞: {service}\nüìÖ –î–∞—Ç–∞: {date}", reply_markup=reply_markup)
    return ConversationHandler.END

# –ü–æ–º–æ—â—å
async def help_command(update: Update, context: CallbackContext):
    keyboard = [["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏"], ["–ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–Ø –ø–æ–º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥–∏. –ù–∞–∂–º–∏ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!", reply_markup=reply_markup)
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: CallbackContext):
    keyboard = [["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏"], ["–ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=reply_markup)
    return ConversationHandler.END

async def main():
    app = Application.builder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^(–ó–∞–ø–∏—Å–∞—Ç—å—Å—è)$"), book_start),
            MessageHandler(filters.Regex("^(–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏)$"), list_bookings),
            MessageHandler(filters.Regex("^(–ü–æ–º–æ—â—å)$"), help_command),
        ],
        states={
            SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_service)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("stats", stats))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())